// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  lastName         String
  firstName        String
  password         String
  address          String
  email            String            @unique
  points           Int               @default(0)
  phoneNumber      String?
  photoUrl         String
  createTime       DateTime          @default(now())
  status           UserStatus        @default(IN_ASTEPTARE)
  ownedArticles    Article[]         @relation("OwnedArticles")
  logs             Log[]
  comments         Comment[]
  county           County?           @relation("administratorCounty")
  countyId         Int?
  village          Village?          @relation("administratorVillage")
  villageId        Int?
  locality         Locality?         @relation("administratorLocality")
  localityId       Int?
  zoneRole         ZoneRole          @default(CETATEAN)
  zoneRoleOn       ZoneType          @default(LOCALITY)
  admin            Boolean           @default(false)
  County           County?           @relation(fields: [countyId], references: [id])
  Village          Village?          @relation(fields: [villageId], references: [id])
  Locality         Locality?         @relation(fields: [localityId], references: [id])
  ArticleVotes     ArticleVote[]
  FavoriteArticles ArticleFavorite[]
}

enum ZoneRole {
  CETATEAN
  ADMINISTRATOR
  MODERATOR
}

enum ZoneType {
  VILLAGE
  LOCALITY
  COUNTY
}

enum UserStatus {
  IN_ASTEPTARE
  APROBAT
  BLOCAT
}

model Log {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     Int
  action     String
  createTime DateTime @default(now())
}

model Article {
  id             Int               @id @default(autoincrement())
  title          String
  description    String
  author         User              @relation("OwnedArticles", fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId       Int
  zone           ZoneType?
  roleUser       ZoneRole?
  admin          Boolean           @default(false)
  createTime     DateTime          @default(now())
  status         ArticleStatus     @default(TRIMIS)
  articleGallery MediaFile[]
  comments       Comment[]
  county         County?           @relation(fields: [countyId], references: [id])
  countyId       Int?
  village        Village?          @relation(fields: [villageId], references: [id])
  villageId      Int?
  locality       Locality?         @relation(fields: [localityId], references: [id])
  localityId     Int?
  votes          ArticleVote[]
  votePoints     Int               @default(0)
  favorites      ArticleFavorite[]
}

enum ArticleStatus {
  TRIMIS
  VIZIONAT
  IN_LUCRU
  EFECTUAT
}

model MediaFile {
  id         Int      @id @default(autoincrement())
  article    Article  @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  articleId  Int
  type       String
  url        String
  createTime DateTime @default(now())
}

model ArticleVote {
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     Int
  article    Article  @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  articleId  Int
  type       VoteType
  createTime DateTime @default(now())

  @@id([userId, articleId])
}

model ArticleFavorite {
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     Int
  article    Article  @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  articleId  Int
  createTime DateTime @default(now())

  @@id([userId, articleId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Comment {
  id                Int       @id @default(autoincrement())
  author            User      @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId          Int
  commentForArticle Boolean
  article           Article?  @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  articleId         Int?
  comment           Comment?  @relation("CommentReplies", fields: [commentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  replies           Comment[] @relation("CommentReplies")
  commentId         Int?
  text              String
  createTime        DateTime  @default(now())
}

model County {
  id              Int       @id @default(autoincrement())
  name            String
  administrator   User?     @relation("administratorCounty", fields: [administratorId], references: [id])
  administratorId Int?      @unique
  moderators      User[]
  Village         Village[]
  articles        Article[]
}

model Village {
  id              Int        @id @default(autoincrement())
  county          County     @relation(fields: [countyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name            String
  administrator   User?      @relation("administratorVillage", fields: [administratorId], references: [id])
  administratorId Int?       @unique
  moderators      User[]
  countyId        Int
  Locality        Locality[]
  city            Boolean    @default(false)
  articles        Article[]
}

model Locality {
  id              Int       @id @default(autoincrement())
  village         Village   @relation(fields: [villageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name            String
  administrator   User?     @relation("administratorLocality", fields: [administratorId], references: [id])
  administratorId Int?      @unique
  moderators      User[]
  villageId       Int
  articles        Article[]
}
