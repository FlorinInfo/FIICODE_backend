// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  lastName         String
  firstName        String
  password         String
  address          String
  email            String          @unique
  points           Int             @default(0)
  phoneNumber      String?
  accountRequest   AccountRequest?
  photoUrl         String
  createTime       DateTime        @default(now())
  status           UserStatus      @default(IN_ASTEPTARE)
  ownedArticles    Article[]       @relation("OwnedArticles")
  favoriteArticles Article[]       @relation("_FavoriteUserArticle")
  upvotedPosts     Article[]       @relation("_UpvotedUserArticle")
  downvotedPosts   Article[]       @relation("_DownvotedUserArticle")
  logs             Log[]
  comments         Comment[]
  county           County?         @relation("administratorCounty")
  countyId         Int?
  village          Village?        @relation("administratorVillage")
  villageId        Int?
  locality         Locality?       @relation("administratorLocality")
  localityId       Int?
  zoneRole         ZoneRole        @default(CETATEAN)
  zoneRoleOn       ZoneType        @default(LOCALITY)
  admin            Boolean         @default(false)
  County           County?         @relation(fields: [countyId], references: [id])
  Village          Village?        @relation(fields: [villageId], references: [id])
  Locality         Locality?       @relation(fields: [localityId], references: [id])
}

enum ZoneRole {
  CETATEAN
  ADMINISTRATOR
  MODERATOR
}

enum ZoneType {
  VILLAGE
  LOCALITY
  COUNTY
}

enum UserStatus {
  IN_ASTEPTARE
  APROBAT
  BLOCAT
}

model AccountRequest {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  identityCard String
  createTime   DateTime @default(now())
}

model Log {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  action     String
  createTime DateTime @default(now())
}

model Article {
  id            Int           @id @default(autoincrement())
  title         String
  description   String
  views         Int           @default(0)
  upvoteUsers   User[]        @relation("_UpvotedUserArticle")
  downvoteUsers User[]        @relation("_DownvotedUserArticle")
  favoritedBy   User[]        @relation("_FavoriteUserArticle")
  author        User          @relation("OwnedArticles", fields: [authorId], references: [id])
  authorId      Int
  zone          ZoneType
  createTime    DateTime      @default(now())
  status        ArticleStatus @default(TRIMIS)
  articleGalery MediaFile[]
  comments      Comment[]
  county        County?       @relation(fields: [countyId], references: [id])
  countyId      Int?
  village       Village?      @relation(fields: [villageId], references: [id])
  villageId     Int?
  locality      Locality?     @relation(fields: [localityId], references: [id])
  localityId    Int?
}

enum ArticleStatus {
  TRIMIS
  VIZIONAT
  IN_LUCRU
  EFECTUAT
}

model MediaFile {
  id             Int      @id @default(autoincrement())
  article        Article  @relation(fields: [articleId], references: [id])
  articleId      Int
  type           String
  locationOnDisk String
  createTime     DateTime @default(now())
}

model Comment {
  id                Int       @id @default(autoincrement())
  author            User      @relation(fields: [authorId], references: [id])
  authorId          Int
  commentForArticle Boolean
  article           Article?  @relation(fields: [articleId], references: [id])
  articleId         Int?
  comment           Comment?  @relation("CommentReplies", fields: [commentId], references: [id])
  replies           Comment[] @relation("CommentReplies")
  commentId         Int?
  text              String
  createTime        DateTime  @default(now())
}

model County {
  id              Int       @id @default(autoincrement())
  name            String
  administrator   User?     @relation("administratorCounty", fields: [administratorId], references: [id])
  administratorId Int?      @unique
  moderators      User[]
  Village         Village[]
  articles        Article[]
}

model Village {
  id              Int        @id @default(autoincrement())
  county          County     @relation(fields: [countyId], references: [id])
  name            String
  administrator   User?      @relation("administratorVillage", fields: [administratorId], references: [id])
  administratorId Int?       @unique
  moderators      User[]
  countyId        Int
  Locality        Locality[]
  city            Boolean    @default(false)
  articles        Article[]
}

model Locality {
  id              Int       @id @default(autoincrement())
  village         Village   @relation(fields: [villageId], references: [id])
  name            String
  administrator   User?     @relation("administratorLocality", fields: [administratorId], references: [id])
  administratorId Int?      @unique
  moderators      User[]
  villageId       Int
  articles        Article[]
}
